{"version":3,"sources":["webpack:///./src/components/Messages/MessageItem.js","webpack:///./src/components/Messages/MessageList.js","webpack:///./src/components/Messages/Messages.js","webpack:///./src/components/Messages/index.js","webpack:///./src/pages/home.js"],"names":["MessageItem","props","onToggleEditMode","setState","state","editMode","editText","message","text","onChangeEditText","event","target","value","onSaveEditText","onEditMessage","render","this","authUser","onRemoveMessage","type","onChange","userId","editedAt","uid","onClick","Component","MessageList","messages","map","key","Messages","_initFirebase","firebaseInit","firebase","onListenForMessages","loading","orderByChild","limitToLast","limit","on","snapshot","messageObject","val","messageList","Object","keys","onChangeText","onCreateMessage","push","createdAt","serverValue","TIMESTAMP","preventDefault","messageSnapshot","set","remove","onNextPage","componentDidMount","componentDidUpdate","componentWillUnmount","off","Consumer","onSubmit","withFirebase","HomePage","compose","withEmailVerification","withAuthorization"],"mappings":"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","file":"component---src-pages-home-js-0f8422d43699f3be08ff.js","sourcesContent":["import React, { Component } from 'react';\n\nclass MessageItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editMode: false,\n      editText: this.props.message.text,\n    };\n  }\n\n  onToggleEditMode = () => {\n    this.setState(state => ({\n      editMode: !state.editMode,\n      editText: this.props.message.text,\n    }));\n  };\n\n  onChangeEditText = event => {\n    this.setState({ editText: event.target.value });\n  };\n\n  onSaveEditText = () => {\n    this.props.onEditMessage(this.props.message, this.state.editText);\n\n    this.setState({ editMode: false });\n  };\n\n  render() {\n    const { authUser, message, onRemoveMessage } = this.props;\n    const { editMode, editText } = this.state;\n\n    return (\n      <li>\n        {editMode ? (\n          <input\n            type=\"text\"\n            value={editText}\n            onChange={this.onChangeEditText}\n          />\n        ) : (\n          <span>\n            <strong>{message.userId}</strong> {message.text}\n            {message.editedAt && <span>(Edited)</span>}\n          </span>\n        )}\n\n        {authUser.uid === message.userId && (\n          <span>\n            {editMode ? (\n              <span>\n                <button onClick={this.onSaveEditText}>Save</button>\n                <button onClick={this.onToggleEditMode}>Reset</button>\n              </span>\n            ) : (\n              <button onClick={this.onToggleEditMode}>Edit</button>\n            )}\n\n            {!editMode && (\n              <button\n                type=\"button\"\n                onClick={() => onRemoveMessage(message.uid)}\n              >\n                Delete\n              </button>\n            )}\n          </span>\n        )}\n      </li>\n    );\n  }\n}\n\nexport default MessageItem;\n","import React from 'react';\n\nimport MessageItem from './MessageItem';\n\nconst MessageList = ({\n  authUser,\n  messages,\n  onEditMessage,\n  onRemoveMessage,\n}) => (\n  <ul>\n    {messages.map(message => (\n      <MessageItem\n        authUser={authUser}\n        key={message.uid}\n        message={message}\n        onEditMessage={onEditMessage}\n        onRemoveMessage={onRemoveMessage}\n      />\n    ))}\n  </ul>\n);\n\nexport default MessageList;\n","import React, { Component } from 'react';\n\nimport { AuthUserContext } from '../Session';\nimport { withFirebase } from '../Firebase';\nimport MessageList from './MessageList';\n\nclass Messages extends Component {\n  _initFirebase = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: '',\n      loading: false,\n      messages: [],\n      limit: 5,\n    };\n  }\n\n  firebaseInit = () => {\n    if (this.props.firebase && !this._initFirebase) {\n      this._initFirebase = true;\n\n      this.onListenForMessages();\n    }\n  };\n\n  componentDidMount() {\n    this.firebaseInit();\n  }\n\n  componentDidUpdate() {\n    this.firebaseInit();\n  }\n\n  onListenForMessages = () => {\n    this.setState({ loading: true });\n\n    this.props.firebase\n      .messages()\n      .orderByChild('createdAt')\n      .limitToLast(this.state.limit)\n      .on('value', snapshot => {\n        const messageObject = snapshot.val();\n\n        if (messageObject) {\n          const messageList = Object.keys(messageObject).map(key => ({\n            ...messageObject[key],\n            uid: key,\n          }));\n\n          this.setState({\n            messages: messageList,\n            loading: false,\n          });\n        } else {\n          this.setState({ messages: null, loading: false });\n        }\n      });\n  };\n\n  componentWillUnmount() {\n    this.props.firebase.messages().off();\n  }\n\n  onChangeText = event => {\n    this.setState({ text: event.target.value });\n  };\n\n  onCreateMessage = (event, authUser) => {\n    this.props.firebase.messages().push({\n      text: this.state.text,\n      userId: authUser.uid,\n      createdAt: this.props.firebase.serverValue.TIMESTAMP,\n    });\n\n    this.setState({ text: '' });\n\n    event.preventDefault();\n  };\n\n  onEditMessage = (message, text) => {\n    const { uid, ...messageSnapshot } = message;\n\n    this.props.firebase.message(message.uid).set({\n      ...messageSnapshot,\n      text,\n      editedAt: this.props.firebase.serverValue.TIMESTAMP,\n    });\n  };\n\n  onRemoveMessage = uid => {\n    this.props.firebase.message(uid).remove();\n  };\n\n  onNextPage = () => {\n    this.setState(\n      state => ({ limit: state.limit + 5 }),\n      this.onListenForMessages,\n    );\n  };\n\n  render() {\n    const { text, messages, loading } = this.state;\n\n    return (\n      <AuthUserContext.Consumer>\n        {authUser => (\n          <div>\n            {!loading && messages && (\n              <button type=\"button\" onClick={this.onNextPage}>\n                More\n              </button>\n            )}\n\n            {loading && <div>Loading ...</div>}\n\n            {messages && (\n              <MessageList\n                authUser={authUser}\n                messages={messages}\n                onEditMessage={this.onEditMessage}\n                onRemoveMessage={this.onRemoveMessage}\n              />\n            )}\n\n            {!messages && <div>There are no messages ...</div>}\n\n            <form\n              onSubmit={event =>\n                this.onCreateMessage(event, authUser)\n              }\n            >\n              <input\n                type=\"text\"\n                value={text}\n                onChange={this.onChangeText}\n              />\n              <button type=\"submit\">Send</button>\n            </form>\n          </div>\n        )}\n      </AuthUserContext.Consumer>\n    );\n  }\n}\n\nexport default withFirebase(Messages);\n","import Messages from './Messages';\n\nexport default Messages;\n","import React from 'react';\nimport { compose } from 'recompose';\n\nimport Layout from '../components/layout';\nimport {\n  withAuthorization,\n  withEmailVerification,\n} from '../components/Session';\nimport Messages from '../components/Messages';\n\nconst HomePageBase = () => (\n  <div>\n    <h1>Home Page</h1>\n    <p>The Home Page is accessible by every signed in user.</p>\n\n    <Messages />\n  </div>\n);\n\nconst condition = authUser => !!authUser;\n\nconst HomePage = compose(\n  withEmailVerification,\n  withAuthorization(condition),\n)(HomePageBase);\n\nexport default () => (\n  <Layout>\n    <HomePage />\n  </Layout>\n);\n"],"sourceRoot":""}